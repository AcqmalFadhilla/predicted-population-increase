# -*- coding: utf-8 -*-
"""Submit proyek pertama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jco43poXG6DukAi49WlUEUtTimj7ON6m

Menginstall kaggle supaya bisah memakai kaggle api
"""

!pip install kaggle

"""memakai kaggle api dengan mengimport kaggle.json akun"""

! chmod 600 /content/kaggle.json

"""memanggil kaggle api dataset"""

! KAGGLE_CONFIG_DIR=/content/ kaggle datasets download -d census/population-time-series-data

"""Mengextrak dataset dari format zip"""

import os
import zipfile

zip_r = zipfile.ZipFile("/content/population-time-series-data.zip", "r")
zip_r.extractall()
zip_r.close()

"""Mengimpor semua library yang di pakai"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf

from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.layers import Dense, LSTM
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR

"""Membaca dataset dengan menggunakan library pandas"""

df = pd.read_csv("/content/POP.csv")

"""memanggil sebagaian dataset(5 teratas)"""

df.head()

"""Jumlah keseluruhan data ada 816 dan 4 kolom

dengan masing kolom realtime,value,date,realtime_end

# **Data expolarations**

mengecek jumlah keselurahan dataset dan berapa kolom
"""

df.shape

"""mengecek kolom numerik(value) berapa countnya,mean,std,min,25%,50%,75%,dan max nya nilai dari kolom value"""

df.describe()

"""dataset tidak memiliki missing value"""

x = (df.value == 0).sum()
y = df.isnull().sum()

print("nilai 0 di kolom value:", x)
print("nilai null di dataset:", y)

"""Dataset tidak memiliki outlinear"""

sns.boxplot(x = df["value"])

"""Mengecek tipe data setiap kolom"""

df.info()

"""mnerubah type data kolom date menjadi date time"""

df["date"] = pd.to_datetime(df["date"])

"""Membuat visualisasi dataset dengan x nya date dan y nya value"""

sns.lineplot(x="date", y="value", data=df)

"""# **Data preprocessing**

membuat windowed dengan memakai cara function untuk memudahkan nantinya
"""

def windowed_dataset(target, window=1, offset=0):
    feature_new, target_new = [], []
    target_np = target.to_numpy()
    for index in range(window, target.shape[0] - offset):
        feature_new.append(target_np[index - window: index])
        target_new.append(target_np[index+offset])
    return np.array(feature_new), np.array(target_new)

"""windowed_dataset digunakan untuk membuat deret waktu berdasarkan kolom target yang kita inginkan. Ini mengasumsikan data sudah diurutkan berdasarkan tanggal dan nilainya bukan nol"""

df = df.sort_values(by=['date'])
window = 5
feature, target = windowed_dataset(df['value'], window=window)
print(feature[0])
print(target[0])
print(df.head(6))

"""Melakukan standarisasi dengan metode scaler

Melakukan standart scaler feature untuk mendapatkan hasil terbaik di model
"""

#scaler faeture
scaler_feature = StandardScaler()
feature_shape = feature.shape
feature_scaled = scaler_feature.fit_transform(feature)
feature_scaled[0]

"""Melakukan standart scaler target untuk mendapatkan hasil terbaik di model"""

#scaler target
scaler_target = StandardScaler()
target_scaled = scaler_target.fit_transform(target.reshape(-1,1))
target_scaled[0: 5]

"""Membagi dataset dengan perbandingan 8:2 dengan 8 data train dan 2 data test"""

def train_test(feature, target, perc_train = 0.8):
    size_train = int(len(feature) * perc_train)

    x_train = feature[0:size_train]
    y_train = target[0:size_train]

    x_test = feature[size_train: len(feature)]
    y_test = target[size_train: len(feature)]

    return x_train, x_test, y_train, y_test
    
x_train, x_test, y_train, y_test = train_test(feature_scaled, target_scaled)

"""Visualisai dataset yang telah di bagi anatara data training dan data test"""

sns.lineplot(x=df['date'].iloc[window:len(y_train) + window], y=y_train[:,0], label='Train')
sns.lineplot(x=df['date'].iloc[len(y_train) + window:], y=y_test[:,0], label='Test')
plt.ylabel('Population')
plt.xlabel('Date')

"""# **Model Development**

Dalam development saya akan memakai algoritma 
1.   Neural Network Regression
2.   Linear Regression
3.   SVR

1. Neural Network Regression(LSTM)

model menggunakan sequntial dengan 5 layer
"""

x_train, X_test = x_train.reshape(-1,window,1), x_test.reshape(-1,window,1)

model = keras.Sequential()
model.add(keras.layers.LSTM(128, input_shape=(x_train.shape[1], x_train.shape[2])))
model.add(keras.layers.Dropout(.4))
model.add(keras.layers.Dense(128, activation="relu"))
model.add(keras.layers.Dropout(.2))
model.add(keras.layers.Dense(units=1))

model.compile(loss='mean_squared_error',
              optimizer='RMSProp',
              metrics=["mae"])
model.summary()

"""melakukan data pelatihan"""

history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10)

"""visualisai hasil latihan dari model Neural Network Regeression"""

plt.plot(history.history["loss"])
plt.plot(history.history["val_loss"])
plt.legend(["train", "validation"])
plt.xlabel("epoch")
plt.ylabel("cost")

"""visaulisasi hasil prediksi dengan data test"""

y_predicted = model.predict(x_test)

plt.plot(y_predicted,label='Prediction')
plt.plot(y_test,label='Actual')
plt.title("Model NNR with LSTM")
plt.legend()

"""**2.Linear Regression**"""

model_linear_reg = LinearRegression().fit(x_train.reshape(-1,window), y_train)
model_linear_reg.score(x_train.reshape(-1,window), y_train)

y_predicted = model_linear_reg.predict(x_test.reshape(-1,window))

plt.plot(y_predicted, label='Prediction')
plt.plot(y_test, label='Actual')
plt.title("Model Linear Regeression")
plt.legend()

"""**3.SVR**"""

model_svr = SVR().fit(x_train.reshape(-1,window), y_train)
model_svr.score(x_train.reshape(-1,window), y_train)

y_predicted = model_svr.predict(x_test.reshape(-1,window))

plt.plot(y_predicted, label="Prediction")
plt.plot(y_test, label="Actualo")
plt.title("Mode SVR")
plt.legend()

"""# **Evalution**

dalam hal ini saya membuat fungsi untuk menggunakan nilai sebelumnya yang dihitung untuk digunakan sebagai entri ke prediksi berikutnya, sehingga kami dapat membuat deret waktu dengan nilai prediksi!
"""

def predict_future_lstm(target, model, window, n=100):
    new_target = target.tolist()
    for i in range(n):
        feature = np.array(new_target[-window:]).reshape(1,window,1)
        target_predicted = model.predict(feature).reshape(1)
        new_target.append(target_predicted)
    return np.array(new_target)

def predict_future(target, model, window, n=100):
    new_target = target.tolist()
    for i in range(n):
        feature = np.array(new_target[-window:]).reshape(-1,window)
        target_predicted = model.predict(feature).reshape(1)
        new_target.append(target_predicted)
    return np.array(new_target)

"""n adalah jumlah satuan waktu yang saya prediksi"""

n = 100
target_model_scaled = predict_future_lstm(target_scaled, model, window, n=n)
target_model_linear_scaled = predict_future(target_scaled,model_linear_reg,window,n=n)
target_model_svr_scaled = predict_future(target_scaled,model_svr,window,n=n)

"""membuat data visualisaso setiap model"""

extra_dates = pd.date_range(df['date'].iloc[-1], periods=n + 1, freq='MS')
extra_dates = extra_dates.to_series().reset_index(drop=True).iloc[1:]
all_dates = pd.concat((df['date'], extra_dates), ignore_index=True)

"""visualisasi nilai train,tes, dan prediksi"""

def future_chart(future_target, y_train, y_test, x_date, window, title=''):
    original_target_size = len(y_train) + len(y_test)
    sns.lineplot(x=x_date[window:len(y_train) + window], y=y_train[:,0], label='Train')
    sns.lineplot(x=x_date[len(y_train) + window: original_target_size + window], y=y_test[:,0], label='Test')
    sns.lineplot(x=x_date[original_target_size + window:], y=future_target[original_target_size:,0], label='Predicted')
    plt.title(label=title)
    plt.show()

future_chart(target_model_scaled,  y_train, y_test, all_dates, window, title='Neural Network Regeression')
future_chart(target_model_linear_scaled,  y_train, y_test, all_dates, window, title='Linear Regression')
future_chart(target_model_svr_scaled,  y_train, y_test, all_dates, window, title='SVR')

"""Jadi Di dapatkan bahwa dalam kasus dataset ini model yang terbaik di pake adalah Model Linear Regeression dari Neural Network regeression dan  SVR"""